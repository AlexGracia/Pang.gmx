<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
image_speed = 0.5;
targetSpeedX = 0;
acceleration = 2;
maxSpeed = 10;
maxHooksActive = 2;
grav = 1;


// Ladders
heightStep = 16;
// Time up ladders
secondsLadders = 0.05;
durationLadders = 30 * secondsLadders;
// Clamp ladders
laddersHeight = sprite_get_height(sprLadders);
minYLadders = objLadders.y;
maxYLadders = objLadders.y + laddersHeight;

numSteps = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
audio_play_sound(soundGameOver, 0, 0);
show_message("Game Over");
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// first update the inputs
targetSpeedX = 0;
if (keyboard_check(vk_left))
{
    targetSpeedX -= maxSpeed;
}
if (keyboard_check(vk_right))
{
    targetSpeedX += maxSpeed;
}

// now let's update the velocity based on the current inputs
offsetSpeed = targetSpeedX - hspeed;
speedInc = clamp(offsetSpeed, -acceleration, acceleration);
hspeed += speedInc;

// now let's update the speed in Y
vspeed += grav;

// set the sprite based on the velociy
if (hspeed != 0)
{
    // set the walking sprite and scale it to 1 or -1 based on the speed
    sprite_index = sprPlayerWalking;
    image_xscale = sign(hspeed);
}
else
{
    sprite_index = sprPlayer;
}

// check if the player wants to shoot
if (keyboard_check_pressed(vk_control))
{
    // get the number of hooks currently active
    numHooks = instance_number(objHook);
    
    if (numHooks &lt; maxHooksActive)
    {
        // shoot a new hook
        instance_create(x, y - sprite_get_height(sprCable), objHook);
    }
}

// Collision ladders
if (place_meeting(x, y + 1, objLadders)){
    grav = 0;

    if (numSteps &gt;= durationLadders){
        // Up
        if (keyboard_check(vk_up) &amp;&amp; y &gt; minYLadders){
            sprite_index = sprUpDown;
            image_xscale = -image_xscale;
            y -= heightStep;
        }
    
        // Down
        else if (keyboard_check(vk_down) &amp;&amp; y &lt; maxYLadders){
            sprite_index = sprUpDown;
            image_xscale = -image_xscale;
            y += heightStep;
        }

        y = clamp(y, minYLadders, maxYLadders);
        numSteps = 0;
    }
}

// Collision platforms
else if (place_meeting(x, y + sprite_get_height(sprDestructiblePlatform), objDestructiblePlatform) || place_meeting(x, y + sprite_get_height(sprNonDestructiblePlatform), objNonDestructiblePlatform)){
    grav = 0;
}
else
    grav = 1;


numSteps += 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBall">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objColHoriz">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// store the the original speed
oldSpeed = vspeed;

// prepare the loop
speedSign = sign(oldSpeed);
absSpeed = abs(oldSpeed);

// start the loop
foundPlace = false;
yCollide = y;
for (i = 0; i &lt; absSpeed &amp;&amp; !foundPlace; ++i)
{
    if (place_empty(x, yCollide + speedSign))
    {
        yCollide += speedSign;
    }
    else
    {
        foundPlace = true;
    }
}

// set the final speed
vspeed = yCollide - y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objColSide">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// grab the speed as we have it before colliding
oldSpeed = hspeed;

// check if we're going left or right
speedSign = sign(oldSpeed);
absSpeed = abs(oldSpeed);

// iterate over all the points until the next one
foundPlace = false;
xCollide = x;
for (i = 0; i &lt; absSpeed &amp;&amp; !foundPlace; ++i)
{
    if (place_free(xCollide + speedSign, y))
    {
        xCollide += speedSign;
    }
    else
    {
        foundPlace = true;
    }
}

// update the speed to be the distance to the collision point
hspeed = xCollide - x;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
